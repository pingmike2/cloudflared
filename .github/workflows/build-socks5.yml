name: Build and Release cloudflared without tag

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name, e.g. cloudflared-socks5-latest'
        required: true
        default: 'cloudflared-socks5-latest'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout fork master
      - name: Checkout fork master
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      # 2️⃣ Add upstream and fetch PR #1020
      - name: Add upstream and fetch PR #1020
        run: |
          git remote add upstream https://github.com/cloudflare/cloudflared.git
          git fetch upstream 0ff20abdcd4678914c1d62a44a667b449b3b7fd9
          git checkout -b pr-1020 FETCH_HEAD

      # 3️⃣ Configure git identity
      - name: Configure git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 4️⃣ Merge PR #1020 into master
      - name: Merge PR #1020
        run: |
          git checkout master
          git merge --no-ff pr-1020 -m "Merge PR #1020: HTTP2 tunnel SOCKS5 support"

      # 5️⃣ Setup Go
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      # 6️⃣ Build cloudflared
      - name: Build cloudflared
        run: |
          make cloudflared
          mkdir -p output
          cp ./cloudflared output/cloudflared

      # 7️⃣ Create Release without tag
      - name: Create GitHub Release (no tag)
        uses: actions/create-release@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: "release-${{ github.run_id }}" # 用 workflow run ID 代替 tag
          release_name: ${{ github.event.inputs.release_name }}
          draft: false
          prerelease: false

      # 8️⃣ Upload binary to Release
      - name: Upload binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/cloudflared
          asset_name: cloudflared
          asset_content_type: application/octet-stream